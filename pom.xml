<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
  <modelVersion>4.0.0</modelVersion>
  <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.hive.code生成的相对路径为：com/hive/code-->
  <groupId>com.hive.code</groupId>
  <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。-->
  <artifactId>hive-web</artifactId>
  <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->
  <packaging>war</packaging>
  <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->
  <version>1.0-SNAPSHOT</version>
  <!--项目的名称, Maven产生的文档用-->
  <name>hive-web</name>
  <!--项目主页的URL, Maven产生的文档用-->
  <url>http://maven.apache.org</url>
  <!--项目开发者列表-->
  <developers>
    <!--某个项目开发者的信息-->
    <developer>
      <!--SCM里项目开发者的唯一标识符-->
      <id>gripen</id>
      <!--项目开发者的全名-->
      <name>gripen un</name>
      <!--项目开发者的email-->
      <email>aa@aa.com</email>
      <!--项目开发者的主页的URL-->
      <url></url>
      <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色-->
      <roles>
        <role>Project Manager</role>
        <role>Architect</role>
      </roles>
      <!--项目开发者所属组织-->
      <organization>demo</organization>
      <!--项目开发者所属组织的URL-->
      <organizationUrl>https://www.test.com</organizationUrl>
      <!--项目开发者属性，如即时消息如何处理等-->
      <properties>
        <dept>No</dept>
      </properties>
      <!--项目开发者所在时区， -11到12范围内的整数。-->
      <timezone>+8</timezone>
    </developer>
  </developers>
  <!--项目的其他贡献者列表-->
  <contributors>
    <!--项目的其他贡献者。参见developers/developer元素-->
    <contributor>
      <name/>
      <email/>
      <url/>
      <organization/>
      <organizationUrl/>
      <roles/>
      <timezone/>
      <properties/>
    </contributor>
  </contributors>
  <properties>
    <!--项目编码-->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!--maven 插件版本-->
    <compiler.plugin.verion>3.8.0</compiler.plugin.verion>
    <resouce.plugin.verion>3.1.0</resouce.plugin.verion>
    <war.plugin.verion>3.2.2</war.plugin.verion>
    <surefire.plugin.verion>3.0.0-M3</surefire.plugin.verion>
    <!--jar 包版本-->
    <java.version>1.8</java.version>
    <spring.version>5.1.5.RELEASE</spring.version>
  </properties>
  <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。-->
  <dependencies>
    <!--单元测试依赖包-->
    <dependency>
      <!--依赖的group ID-->
      <groupId>junit</groupId>
      <!--依赖的artifact ID-->
      <artifactId>junit</artifactId>
      <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->
      <version>3.8.1</version>
      <!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
                 - compile ：默认范围，用于编译
                 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
                 - runtime: 在执行时需要使用
                 - test:    用于test任务时使用
                 - system: 需要外在提供相应的元素。通过systemPath来取得
                 - systemPath: 仅用于范围为system。提供相应的路径
                 - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用-->
      <scope>test</scope>
    </dependency>
    <!-- <dependency>
       <groupId>org.springframework</groupId>
       <artifactId>spring-webmvc</artifactId>
       <version>${spring-webmvc}</version>
     </dependency>-->
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${spring.version}</version>
    </dependency>
  </dependencies>
  <!-- 针对不同环境的profile -->
  <!--在列的项目构建profile，如果被激活，会修改构建处理-->
  <profiles>
    <!-- 开发配置 -->
    <!--根据环境参数或命令行参数激活某个构建处理-->
    <profile>
      <id>dev</id>
      <properties>
        <package.environment>dev</package.environment>
        <filterName>dev</filterName>
        <!--<spring-webmvc>5.1.5.RELEASE</spring-webmvc>-->
      </properties>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
    </profile>
    <profile>
      <id>test</id>
      <properties>
        <package.environment>test</package.environment>
        <filterName>test</filterName>
      </properties>
    </profile>
    <profile>
      <id>prod</id>
      <properties>
        <package.environment>prod</package.environment>
        <filterName>prod</filterName>
      </properties>
    </profile>
  </profiles>
  <!--添加阿里云远程仓库-->
  <repositories>
    <repository>
      <id>nexus-aliyun</id>
      <name>Nexus aliyun</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public</url>
    </repository>
  </repositories>
  <!--构建项目所需要的信息。参见build元素-->
  <build>
    <finalName>hive-web</finalName>
    <!--<sourceDirectory>src</sourceDirectory>-->
    <!--<testSourceDirectory>src/test/java</testSourceDirectory>-->
    <resources>
      <resource>
        <directory>src</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/**.properties</include>
          <include>**/**.xml</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>${war.plugin.verion}</version>
        <configuration>
          <!--<webXml>WebRoot\WEB-INF\web.xml</webXml>
          <warSourceDirectory>WebRoot</warSourceDirectory>-->
          <!-- maven打包的时候告诉maven不需要web.xml,否刚会报找不到web.xml错误 -->
          <failOnMissingWebXml>false</failOnMissingWebXml>
          <archive>
            <addMavenDescriptor>false</addMavenDescriptor>
          </archive>
          <warName>hive-web</warName>
          <webResources>
            <resource>
              <directory>src/main/resources/${package.environment}</directory>
              <targetPath>WEB-INF/classes</targetPath>
              <filtering>true</filtering>
            </resource>
          </webResources>
          <warSourceExcludes><!--src/main/resources/dev/nowar.md,src/main/resources/prod/nowar.md--></warSourceExcludes>
          <packagingExcludes>
            WEB-INF/classes/main/resources/dev/**,
            WEB-INF/classes/main/resources/test/**,
            WEB-INF/classes/main/resources/prod/**
          </packagingExcludes>
          <!--不需要web.xml-->
          <!--<failOnMissingWebXml>false</failOnMissingWebXml>-->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler.plugin.verion}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
      </plugin>
      <!-- 不同环境的配置文件选择 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${resouce.plugin.verion}</version>
        <!--<executions>
          <execution>
            <id>copy-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <overwrite>true</overwrite>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/${package.environment}</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>-->
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.plugin.verion}</version>
        <configuration>
          <!-- 跳过测试阶段 -->
          <skipTests>true</skipTests>
          <!-- 忽略测试失败  -->
          <testFailureIgnore>true</testFailureIgnore>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
